from flask import Flask, request, jsonify
import requests
import json
import os
import logging
import threading
import re # Importa para usar express√µes regulares
from googleapiclient.discovery import build # Importa para Google Custom Search API
import psycopg2 # <-- NOVO: Importa para PostgreSQL
from psycopg2 import extras # <-- NOVO: Para funcionalidades extras do psycopg2, embora n√£o usemos execute_values aqui, √© boa pr√°tica

# Configura√ß√£o de logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

app = Flask(__name__) # Corrigido: __name__ com dois underscores

# Chaves de API vindas das vari√°veis de ambiente
OPENROUTER_KEY = os.environ.get("OPENROUTER_KEY")
ULTRAMSG_TOKEN = os.environ.get("ULTRAMSG_TOKEN")

# Vari√°veis para a API do Google Custom Search
SEARCH_API_KEY = os.environ.get("Search_API_KEY") 
SEARCH_CX = os.environ.get("Search_CX")          

# --- NOVO: Vari√°veis para a conex√£o direta com o PostgreSQL (Neon.tech) ---
PG_DB_USER = os.environ.get("PG_DB_USER")
PG_DB_PASSWORD = os.environ.get("PG_DB_PASSWORD")
PG_DB_HOST = os.environ.get("PG_DB_HOST")
PG_DB_PORT = os.environ.get("PG_DB_PORT", "5432") 
PG_DB_NAME = os.environ.get("PG_DB_NAME")
# --- FIM NOVO ---

# --- VERIFICA√á√ïES DE VARI√ÅVEIS DE AMBIENTE ---
if not OPENROUTER_KEY:
    logging.error("‚ùå OPENROUTER_KEY n√£o definida. Defina como vari√°vel de ambiente para que o app funcione.")
    exit(1)

if not ULTRAMSG_TOKEN:
    logging.error("‚ùå ULTRAMSG_TOKEN n√£o definida. Defina como vari√°vel de ambiente para que o app funcione.")
    exit(1)

if not SEARCH_API_KEY or not SEARCH_CX:
    logging.error("‚ùå Vari√°veis Search_API_KEY ou Search_CX n√£o definidas. A pesquisa web n√£o funcionar√°.")
    exit(1)

# --- NOVO: Verifica√ß√£o das vari√°veis do PostgreSQL para o BOT PRINCIPAL ---
if not all([PG_DB_USER, PG_DB_PASSWORD, PG_DB_HOST, PG_DB_NAME]):
    logging.error("‚ùå Vari√°veis de ambiente do PostgreSQL (PG_DB_USER, PG_DB_PASSWORD, PG_DB_HOST, PG_DB_NAME) n√£o definidas para o bot principal. A busca de produtos n√£o funcionar√°.")
    exit(1)
# --- FIM NOVO ---


# --- FUN√á√ïES AUXILIARES ---

# NOVO: Fun√ß√£o para consultar produtos diretamente do PostgreSQL
def get_products_from_pg(product_code=None, search_term=None):
    pg_conn = None
    pg_cursor = None
    try:
        pg_conn = psycopg2.connect(
            host=PG_DB_HOST,
            database=PG_DB_NAME,
            user=PG_DB_USER,
            password=PG_DB_PASSWORD,
            port=PG_DB_PORT,
            sslmode='require' # Neon.tech geralmente exige SSL
        )
        pg_cursor = pg_conn.cursor()

        query = "SELECT pro_in_codigo, pro_st_descricao, re_custo FROM produtos"
        params = []
        
        if product_code:
            query += " WHERE UPPER(pro_in_codigo) = %s"
            params.append(product_code.upper())
            logging.info(f"DB Query: Buscando produto pelo c√≥digo: {product_code}")
        elif search_term:
            query += " WHERE LOWER(pro_st_descricao) LIKE %s" 
            params.append(f"%{search_term.lower()}%")
            logging.info(f"DB Query: Buscando produtos por termo: {search_term}")
            query += " LIMIT 50" # Limita a 50 resultados para evitar sobrecarga da resposta da IA
        
        pg_cursor.execute(query, params)
        
        columns = [desc[0] for desc in pg_cursor.description]
        rows = []
        for row_data in pg_cursor.fetchall():
            rows.append(dict(zip(columns, row_data)))
        
        logging.info(f"DB Query retornou {len(rows)} linhas.")
        return rows
    except psycopg2.Error as e:
        logging.error(f"‚ùå Erro ao consultar PostgreSQL DB diretamente: {e}", exc_info=True)
        return []
    finally:
        if pg_cursor: pg_cursor.close()
        if pg_conn: pg_conn.close()

# Fun√ß√£o para realizar a pesquisa web com Google Custom Search
def perform_google_custom_search(query):
    try:
        service = build("customsearch", "v1", developerKey=SEARCH_API_KEY)
        res = service.cse().list(q=query, cx=SEARCH_CX, num=3).execute() 
        
        snippets = []
        if 'items' in res:
            for item in res['items']:
                if 'snippet' in item:
                    title = item.get('title', 'T√≠tulo indispon√≠vel')
                    link = item.get('link', 'Link indispon√≠vel')
                    snippet_text = item['snippet']
                    snippets.append(f"- {title}: {snippet_text} (Fonte: {link})")
        return snippets
    except Exception as e:
        logging.error(f"‚ùå Erro ao realizar pesquisa com Google Custom Search API: {e}", exc_info=True)
        return []

# Fun√ß√£o para enviar resposta via UltraMsg
def enviar_resposta_ultramsg(numero, body):
    try:
        resp = requests.post(
            "https://api.ultramsg.com/instance121153/messages/chat",
            data={
                "token": ULTRAMSG_TOKEN,
                "to": numero,
                "body": body
            },
            timeout=10
        )
        resp.raise_for_status()
        logging.info(f"‚úÖ Resposta enviada para {numero}. UltraMsg retornou: {resp.text}")
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå Erro ao enviar resposta via UltraMsg para {numero}: {e}", exc_info=True)

# Fun√ß√£o para responder via IA (OpenRouter)
def responder_ia(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "google/gemini-2.0-flash-001", 
        "messages": [
            {
                "role": "system",
                "content": """üéâ Ol√°! Eu sou a Iris, a assistente virtual da Ginger Fragrances! ‚ú® Meu papel √© ser sua melhor amiga no mundo dos aromas: sempre educada, prestativa, simp√°tica e com um toque de criatividade! üíñ Fui criada para ajudar nossos incr√≠veis vendedores e funcion√°rios a encontrar rapidinho os c√≥digos das fragr√¢ncias com base nas notas olfativas que os clientes amam, tipo ma√ß√£ üçé, bambu üéã, baunilha üç¶ e muito mais! 
                Al√©m disso, eu posso **realizar pesquisas na web para te ajudar com perguntas mais gerais**, **informar o custo de uma fragr√¢ncia espec√≠fica pelo c√≥digo OU nome** e, se voc√™ precisar, posso **calcular o pre√ßo de venda das nossas fragr√¢ncias** com o markup que voc√™ me disser!
                
                **Nossos Valores na Ginger Fragrances s√£o:**
                * **FOCO NO RESULTADO / COLABORA√á√ÉO / EMPATIA**
                * **PAIX√ÉO E CRIATIVIDADE / EXCEL√äNCIA NA EXECU√á√ÉO**
                * **RESPEITO √ÄS PESSOAS E AO MEIO AMBIENTE**
                
                Sempre que algu√©m descrever um cheirinho ou uma sensa√ß√£o, minha miss√£o √© indicar as fragr√¢ncias que mais se aproximam disso, **listando os c√≥digos correspondentes de forma clara, √∫nica, r√°pida e super eficiente, e sendo o mais concisa poss√≠vel na resposta. Responda apenas uma vez.** Vamos descobrir o aroma perfeito? üòä"""
            },
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.3 # Ajustado para um equil√≠brio entre criatividade e concis√£o
    }

    try:
        r = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=body, timeout=30)
        r.raise_for_status()
        resposta = r.json()

        if "choices" not in resposta or not resposta['choices']:
            logging.error(f"‚ùå Resposta da IA n√£o cont√©m 'choices' ou est√° vazia: {json.dumps(resposta, indent=2)}")
            return "Ops! ü§∑‚Äç‚ôÄÔ∏è N√£o consegui gerar uma resposta agora! Parece que a magia dos aromas est√° um pouquinho distante. Tente de novo! üòâ"

        return resposta['choices'][0]['message']['content']
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå Erro ao comunicar com a API da OpenRouter: {e}", exc_info=True)
        return "Ah, n√£o! üò© Estou com um pequeno probleminha pra falar com o universo da intelig√™ncia artificial agora. Por favor, me d√™ um minutinho e tente de novo mais tarde! Prometo caprichar na pr√≥xima! ‚ú®"
    except json.JSONDecodeError:
        logging.error(f"‚ùå Resposta da IA n√£o √© um JSON v√°lido. Status: {r.status_code}, Resposta: {r.text}", exc_info=True)
        return "Eita! üò≤ Recebi uma resposta estranha do meu c√©rebro virtual! Ser√° que a internet deu uma embolada? Tenta mais uma vez, por favor! üôè"
    except Exception as e:
        logging.error(f"‚ùå Erro inesperado ao processar resposta da IA: {e}", exc_info=True)
        return "Puxa! üò± Aconteceu um erro inesperado enquanto eu estava pensando na sua resposta! Mas calma, j√° estou avisando os g√™nios da Ginger Fragrances pra eles darem um jeitinho! Me manda um 'oi' de novo pra gente tentar! üòâ"


# Fun√ß√£o principal de processamento da mensagem (executada em segundo plano)
def processar_mensagem_em_segundo_plano(ultramsg_data, numero, msg):
    logging.info(f"üì© [Processamento em Segundo Plano] Mensagem recebida de {numero}: '{msg}'")
    resposta_final = ""

    try:
        # --- L√≥gica para responder sobre os valores da empresa ---
        if any(p in msg for p in ["valores", "nossos valores", "quais os valores", "cultura da empresa", "missao", "princ√≠pios"]):
            resposta_final = """üéâ Ol√°! Que √≥timo que voc√™ se interessa pelos nossos valores na Ginger Fragrances! ‚ú® Eles s√£o o cora√ß√£o da nossa empresa e guiam tudo o que fazemos:

* **FOCO NO RESULTADO:** Buscamos sempre a excel√™ncia e o impacto positivo.
* **COLABORA√á√ÉO:** Acreditamos que juntos somos mais fortes.
* **EMPATIA:** Nos colocamos no lugar do outro para entender e ajudar.
* **PAIX√ÉO E CRIATIVIDADE:** Amamos o que fazemos e sempre inovamos!
* **EXCEL√äNCIA NA EXECU√á√ÉO:** Fazemos tudo com o m√°ximo de cuidado e qualidade.
* **RESPEITO √ÄS PESSOAS E AO MEIO AMBIENTE:** Cuidamos do nosso time e do nosso planeta.

Seja bem-vindo(a) √† nossa ess√™ncia! üòä Quer saber mais sobre nossas fragr√¢ncias incr√≠veis!"""
            enviar_resposta_ultramsg(numero, resposta_final)
            return

        # --- NOVO: L√≥gica para informar o custo de uma PR por C√ìDIGO OU NOME ---
        # Regex para capturar "prXXXXX" OU uma frase que pode ser um nome
        # Grupo 1: captura o c√≥digo (pr\d+)
        # Grupo 2: captura o nome (qualquer coisa depois de "custo da " que n√£o seja pr\d+)
        match_custo = re.search(r"(?:qual o|qual √© o|pre√ßo de)?\s*custo da\s+(pr\d+)", msg)
        match_custo_nome = re.search(r"(?:qual o|qual √© o|pre√ßo de)?\s*custo da\s+(.+)", msg)

        product_code_requested = None
        product_name_requested = None

        if match_custo:
            product_code_requested = match_custo.group(1).upper()
        elif match_custo_nome and not match_custo_nome.group(1).strip().upper().startswith("PR"): # Garante que n√£o pegue "PR" como nome
            product_name_requested = match_custo_nome.group(1).strip()
            
        if product_code_requested or product_name_requested:
            produtos_encontrados = []
            if product_code_requested:
                produtos_encontrados = get_products_from_pg(product_code=product_code_requested)
                logging.info(f"DEBUG (Custo por C√≥digo): Buscou {product_code_requested}, encontrou {len(produtos_encontrados)}.")
            elif product_name_requested:
                produtos_encontrados = get_products_from_pg(search_term=product_name_requested)
                logging.info(f"DEBUG (Custo por Nome): Buscou '{product_name_requested}', encontrou {len(produtos_encontrados)}.")

            if len(produtos_encontrados) == 1:
                prod = produtos_encontrados[0]
                cost_value = prod.get("re_custo") 
                logging.info(f"DEBUG: Valor de re_custo para {product_code_requested or product_name_requested} antes da convers√£o (custo direto): '{cost_value}' (Tipo: {type(cost_value)})") 
                
                found_product_cost = None
                if cost_value is not None:
                    try:
                        found_product_cost = float(cost_value)
                    except (ValueError, TypeError):
                        logging.warning(f"Custo inv√°lido (n√£o num√©rico) para {product_code_requested or product_name_requested} (custo direto): '{cost_value}'") 
            
                if found_product_cost is not None:
                    prompt = f"""O cliente perguntou 'qual o custo da {product_code_requested or product_name_requested}'.
                    O custo encontrado para '{product_code_requested or product_name_requested}' √© R$ {found_product_cost:.2f}.
                    
                    Como a Iris, a assistente virtual da Ginger Fragrances, informe o custo encontrado de forma simp√°tica, clara e objetiva. Mencione o c√≥digo/nome do produto e o custo. Use emojis!"""
                    resposta_final = responder_ia(prompt)
                else:
                    resposta_final = f"Ah, que pena! üòï N√£o consegui encontrar o custo para a fragr√¢ncia {product_code_requested or product_name_requested} nos nossos registros ou o custo √© inv√°lido. Voc√™ digitou o c√≥digo/nome certinho? Tente novamente! ‚ú®"
            elif len(produtos_encontrados) > 1:
                list_of_products = []
                for i, prod in enumerate(produtos_encontrados[:5]): # Limita a lista para a IA
                    list_of_products.append(f"{i+1}. C√≥digo: {prod.get('pro_in_codigo', 'N/A')} - Descri√ß√£o: {prod.get('pro_st_descricao', 'N/A')}")
                
                prompt = f"""O cliente perguntou sobre o custo de '{product_name_requested}', mas encontrei m√∫ltiplas fragr√¢ncias com nomes ou descri√ß√µes similares:
{chr(10).join(list_of_products)}

Como a Iris, a assistente virtual da Ginger Fragrances, explique que encontrou mais de um produto e pe√ßa para o cliente especificar qual ele deseja, fornecendo o c√≥digo exato (PRXXXXX). Seja simp√°tica e √∫til. ‚ú®"""
                resposta_final = responder_ia(prompt)

            else: # Nenhuma PR encontrada por c√≥digo ou nome
                resposta_final = f"Que pena! üòî N√£o encontrei nenhuma fragr√¢ncia com o c√≥digo ou nome '{product_code_requested or product_name_requested}' nos nossos registros. Voc√™ digitou o c√≥digo/nome certinho? Tente novamente com outro termo. Estou aqui para ajudar! üïµÔ∏è‚Äç‚ôÄÔ∏èüíñ"
            
            enviar_resposta_ultramsg(numero, resposta_final)
            return # Finaliza o processamento para esta inten√ß√£o

        # --- L√≥gica para calcular pre√ßo de venda ---
        match_preco = re.search(r"(?:qual o|calcule o)?\s*pre√ßo de venda da (pr\d+)\s+com o markup\s+(\d+(?:[.,]\d+)?)", msg)
        
        if match_preco:
            product_code_requested = match_preco.group(1).upper() # Ex: PR11410
            markup_str = match_preco.group(2).replace(',', '.') # Ex: "3" ou "3.5"
            
            try:
                markup = float(markup_str)
                fixed_divisor = 0.7442

                produtos_encontrados = get_products_from_pg(product_code=product_code_requested)

                found_product_cost = None
                if produtos_encontrados:
                    prod = produtos_encontrados[0] 
                    cost_value = prod.get("re_custo") 
                    logging.info(f"DEBUG: Valor de re_custo para {product_code_requested} antes da convers√£o: '{cost_value}' (Tipo: {type(cost_value)})") 

                    if cost_value is not None:
                        try:
                            found_product_cost = float(cost_value)
                        except (ValueError, TypeError):
                            logging.warning(f"Custo inv√°lido (n√£o num√©rico) para {product_code_requested}: '{cost_value}'") 

                if found_product_cost is not None:
                    selling_price = (markup * found_product_cost) / fixed_divisor
                    
                    prompt = f"""O cliente pediu para calcular o pre√ßo de venda da fragr√¢ncia '{product_code_requested}' com um markup de {markup}.
                    O custo encontrado para '{product_code_requested}' foi de R$ {found_product_cost:.2f}.
                    O pre√ßo de venda calculado √© R$ {selling_price:.2f}.
                    
                    Como a Iris, a assistente virtual da Ginger Fragrances, informe o pre√ßo de venda calculado de forma simp√°tica, clara e objetiva. Mencione o c√≥digo do produto, o markup usado e o pre√ßo final. Use emojis! N√£o explique a f√≥rmula. Exemplo: 'Ol√°! Para a fragr√¢ncia [c√≥digo], com markup [x], o pre√ßo de venda √© de R$ [valor]! ‚ú®'"""
                    resposta_final = responder_ia(prompt)
                else:
                    resposta_final = f"Ah, que pena! üòï N√£o consegui encontrar o custo para a fragr√¢ncia {product_code_requested} nos nossos registros. Voc√™ digitou o c√≥digo certinho? Tente novamente ou me diga sobre qual fragr√¢ncia voc√™ gostaria de calcular o pre√ßo de venda! ‚ú®"
            except ValueError:
                resposta_final = "Ops! üßê O markup que voc√™ informou n√£o parece um n√∫mero v√°lido. Por favor, use um n√∫mero (ex: '3' ou '3.5')."
            except Exception as e: 
                logging.error(f"‚ùå Erro ao calcular pre√ßo/consultar DB: {e}", exc_info=True)
                resposta_final = "Desculpe, tive um problema ao calcular o pre√ßo agora. Nossos sistemas est√£o um pouco t√≠midos! Tente novamente mais tarde! üò•"

            enviar_resposta_ultramsg(numero, resposta_final)
            return

        # L√≥gica para busca de fragr√¢ncias por descri√ß√£o (se o cliente n√£o pediu c√°lculo nem valores)
        elif any(p in msg for p in ["fragr√¢ncia", "fragrancia", "produto", "tem com", "cont√©m", "cheiro", "com"]):
            # --- MUDAN√áA AQUI: Chamar get_products_from_pg diretamente ---
            # Extrair termo de busca da mensagem do cliente para passar para a fun√ß√£o
            search_term_for_db = " ".join([p for p in msg.split() if len(p) > 2]) 
            produtos = get_products_from_pg(search_term=search_term_for_db)

            palavras_chave = [p for p in msg.split() if len(p) > 2] 

            achados = []
            for prod in produtos: 
                descricao = prod.get("pro_st_descricao", "").lower() 
                codigo = prod.get("pro_in_codigo", "")             
                if any(termo in descricao for termo in palavras_chave):
                    achados.append(f"C√≥digo: {codigo} - Descri√ß√£o: {descricao}")
                    if len(achados) >= 5: 
                        break

            if not achados:
                resposta_final = "Que pena! üòî N√£o encontrei nenhuma fragr√¢ncia com essa descri√ß√£o. Mas n√£o desanime! Nossos produtos s√£o um universo de aromas! Que tal tentar com outras palavras-chave ou me dar mais detalhes sobre o cheiro que voc√™ imagina? Estou pronta para a pr√≥xima busca! üïµÔ∏è‚Äç‚ôÄÔ∏èüíñ"
            else:
                prompt = f"""Com base nestes produtos incr√≠veis que encontrei para voc√™:
{chr(10).join(achados)}
Por favor, como a Iris, a assistente virtual super animada da Ginger Fragrances, responda ao cliente de forma **super simp√°tica, vibrante e concisa**, listando os c√≥digos e descri√ß√µes dos produtos encontrados **apenas uma vez, em um formato divertido e f√°cil de ler**! Convide-o com entusiasmo a perguntar sobre outras maravilhas perfumadas se ainda n√£o for exatamente o que ele busca! ‚ú®"""
                resposta_final = responder_ia(prompt)
        # L√≥gica para pesquisa web (perguntas gerais)
        else: 
            search_query = msg
            snippets = perform_google_custom_search(search_query) 
            
            search_results_text = ""
            if snippets:
                search_results_text = "\n".join(snippets)

            if search_results_text:
                prompt = f"""Mensagem do cliente: '{msg}'.
                Informa√ß√µes da web encontradas:
                {search_results_text}
                
                Com base na mensagem do cliente e nas informa√ß√µes da web (se relevantes), como a Iris, a assistente virtual da Ginger Fragrances, responda de forma super simp√°tica, animada e √∫til. Se a pergunta for geral, use as informa√ß√µes da web para responder de forma concisa. Se for sobre fragr√¢ncias e a pesquisa n√£o ajudar a encontrar um produto espec√≠fico, convide-o a perguntar sobre notas olfativas ou outros detalhes. Lembre-se de sua personalidade √∫nica e responda apenas uma vez! ‚ú®"""
            else:
                prompt = f"Mensagem do cliente: '{msg}'. Responda como a Iris, a assistente virtual da Ginger Fragrances, se apresentando e convidando-o a perguntar sobre fragr√¢ncias espec√≠ficas ou notas olfativas. Parece que n√£o encontrei informa√ß√µes adicionais na web para isso no momento. ü§î Que tal explorar o mundo dos cheirinhos? üòä"
            
            resposta_final = responder_ia(prompt)

    except Exception as e:
        logging.error(f"‚ùå Erro inesperado durante o processamento da mensagem em segundo plano: {e}", exc_info=True)
        resposta_final = "Oh-oh! ü•∫ Algo inesperado aconteceu enquanto eu estava buscando a resposta perfeita para voc√™! Mas n√£o se preocupe, o time da Ginger Fragrances j√° foi avisado e estamos correndo pra resolver isso! Por favor, tente novamente em alguns instantes. Sua satisfa√ß√£o √© nosso cheirinho favorito! üòâ"

    enviar_resposta_ultramsg(numero, resposta_final)


@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json
    
    logging.info(f"‚ú® Payload JSON bruto recebido da UltraMsg: {json.dumps(data, indent=2)}")

    if not data:
        logging.warning("‚ö†Ô∏è Requisi√ß√£o sem JSON no corpo. Verifique a configura√ß√£o do webhook na UltraMsg.")
        return jsonify({"status": "error", "message": "Requisi√ß√£o sem JSON"}), 200 # Alterado para 200 OK para evitar reenvios

    ultramsg_data = data.get("data", {})
    msg = ultramsg_data.get("body", "").strip().lower()
    # CORRIGIDO AQUI: ultramsg_data.get para 'from'
    numero = ultramsg_data.get("from", "").replace("@c.us", "").strip() 

    if not msg or not numero:
        logging.warning(f"‚ö†Ô∏è Campos 'body' ou 'from' ausentes ou vazios no payload. Body: '{msg}', From: '{numero}'. Verifique o formato do JSON da UltraMsg.")
        return jsonify({"status": "error", "message": "Campos 'body' ou 'from' ausentes ou vazios"}), 200 


    # Inicia o processamento em um thread separado
    thread = threading.Thread(target=processar_mensagem_em_segundo_plano, args=(ultramsg_data, numero, msg))
    thread.start()

    # Retorna 200 OK imediatamente para a UltraMsg
    return jsonify({"status": "received", "message": "Mensagem recebida e processamento iniciado em segundo plano."}), 200

def enviar_resposta_ultramsg(numero, body):
    try:
        resp = requests.post(
            "https://api.ultramsg.com/instance126332/messages/chat",
            data={
                "token": ULTRAMSG_TOKEN,
                "to": numero,
                "body": body
            },
            timeout=10
        )
        resp.raise_for_status()
        logging.info(f"‚úÖ Resposta enviada para {numero}. UltraMsg retornou: {resp.text}")
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå Erro ao enviar resposta via UltraMsg para {numero}: {e}", exc_info=True)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    logging.info(f"üöÄ Servidor iniciado na porta {port}")
    app.run(host="0.0.0.0", port=port)
